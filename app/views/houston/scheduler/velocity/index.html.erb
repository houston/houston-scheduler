<div id="velocity"></div>

<% content_for :javascripts do %>
<script type="text/javascript">
  $(function() {
    window.data = <%=raw Houston::Scheduler::VelocityTicketPresenter.new(@tickets).to_json %>;
    
    // call the method below
    showScatterPlot(data);
    
    function showScatterPlot(data) {
      
      // just to have some space around items.
      var margins = {
          "left": 40,
          "right": 30,
          "top": 30,
          "bottom": 30
      };
      
      var width = 800;
      var height = 500;
      
      // we add the SVG component to the scatter-load div
      var svg = d3.select("#velocity")
        .append("svg").attr("width", width).attr("height", height)
        .append("g").attr("transform", "translate(" + margins.left + "," + margins.top + ")");

      // this sets the scale that we're using for the X axis. 
      // the domain define the min and max variables to show. In this case, it's the min and max prices of items.
      // this is made a compact piece of code due to d3.extent which gives back the max and min of the price variable within the dataset
      var x = d3.scale.linear()
        .domain(d3.extent(data, function (d) { return d.estimated; }))
        .range([0, width - margins.left - margins.right]);

      // this does the same as for the y axis but maps from the rating variable to the height to 0. 
      var y = d3.scale.linear()
        .domain(d3.extent(data, function (d) { return d.actual; }))
        .range([height - margins.top - margins.bottom, 0]);

      // we add the axes SVG component. At this point, this is just a placeholder. The actual axis will be added in a bit
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + y.range()[0] + ")");
      svg.append("g").attr("class", "y axis");

      // this is our X axis label. Nothing too special to see here.
      svg.append("text")
          .attr("fill", "#414241")
          .attr("text-anchor", "end")
          .attr("x", width - 70)
          .attr("y", y.range()[0] - 6)
          .text("Estimated Effort");
      
      // this is our Y axis label.
      svg.append("text")
          .attr("fill", "#414241")
          .attr("text-anchor", "end")
          .attr("y", 6)
          .attr("dy", ".71em")
          .attr("transform", "rotate(-90)")
          .text("Actual Hours");

      // this is the actual definition of our x and y axes. The orientation refers to where the labels appear - for the x axis, below or above the line, and for the y axis, left or right of the line. Tick padding refers to how much space between the tick and the label. There are other parameters too - see https://github.com/mbostock/d3/wiki/SVG-Axes for more information
      var xAxis = d3.svg.axis().scale(x).orient("bottom").tickPadding(2);
      var yAxis = d3.svg.axis().scale(y).orient("left").tickPadding(2);

      // this is where we select the axis we created a few lines earlier. See how we select the axis item. in our svg we appended a g element with a x/y and axis class. To pull that back up, we do this svg select, then 'call' the appropriate axis object for rendering.    
      svg.selectAll("g.y.axis").call(yAxis);
      svg.selectAll("g.x.axis").call(xAxis);

      // now, we can get down to the data part, and drawing stuff. We are telling D3 that all nodes (g elements with class node) will have data attached to them. The 'key' we use (to let D3 know the uniqueness of items) will be the name. Not usually a great key, but fine for this example.
      var point = svg.selectAll("g.node").data(data, function (d) { return d.number; });

      // add the tooltip area to the webpage
      var tooltip = d3.select("body").append("div")
          .attr("class", "tooltip")
          .style("opacity", 0);

      // we 'enter' the data, making the SVG group (to contain a circle and text) with a class node. This corresponds with what we told the data it should be above.
      var group = point.enter().append("g").attr("class", "node")
          .attr('transform', function (d) { return "translate(" + x(d.estimated) + "," + y(d.actual) + ")"; });

      group.append("circle")
          .attr("r", 5)
          .attr("class", "dot")
          .style("fill", function (d) { return d.projectColor; })
          .on("mouseover", function(d) {
            tooltip.transition().duration(200).style("opacity", .9);
            tooltip.html(d.projectTitle + " #" + d.number + "<br/>Estimated: " + d.estimated + "<br/>Actual: " + d.actual)
             .style("left", (d3.event.pageX + 15) + "px")
             .style("top", (d3.event.pageY - 15) + "px");
          })
          .on("mouseout", function(d) {
            tooltip.transition().duration(500).style("opacity", 0);
          });
    }
  });
</script>
<% end %>
